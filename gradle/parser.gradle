ext.grammarSpec = file("${projectDir}/src/main/resources/snacks.grammar")
ext.parserClass = file("${generatedDir}/snacks/lang/parser/Parser.java")
ext.terminals = file("${generatedDir}/snacks/lang/parser/Terminals.java")
ext.parserClasses = files(parserClass, terminals)

configurations {
    beaver
}

dependencies {
    beaver 'net.sf.beaver:beaver-ant:0.9.11'
    compile 'net.sf.beaver:beaver-cc:0.9.11'
    compile 'net.sf.beaver:beaver-rt:0.9.11'
}

task (cleanParser) {
    inputs.files parserClasses
    doLast {
        parserClasses.each { it.delete() }
    }
}

task (generateParser, dependsOn: setUpGeneratedDir) {
    inputs.file grammarSpec
    outputs.files parserClasses
    doLast {
        parserClasses.each { it.delete() }
        ant.taskdef (
            name: 'beaver',
            classname: 'beaver.comp.run.AntTask',
            classpath: configurations.beaver.asPath
        )
        ant.beaver (
            file: grammarSpec,
            destdir: generatedDir,
            compress: 'no',
            exportTables: 'no',
            sortTerminals: 'no',
            terminalNames: 'yes',
            exportTerminals: 'yes',
            useSwitch: 'no',
            anonymousActions: 'no',
            reportActions: 'no',
        )
        parserClasses.each {
            if (!it.exists()) {
                throw new GradleException("Failed to generate parser")
            }
        }
        parserClass.write(parserClass.text.replaceAll(
            'public class Parser',
            '@SuppressWarnings("unchecked")\npublic class Parser'
        ))
    }
}

compileJava.dependsOn << generateParser
clean.dependsOn << cleanParser
