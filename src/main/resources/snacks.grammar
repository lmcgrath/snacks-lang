%goal module;
%goal expression;
%package "snacks.lang.parser";
%class "Parser";
%import "java.io.IOException",
        "java.util.List",
        "java.util.Set",
        "snacks.lang.Type",
        "snacks.lang.parser.syntax.*",
        "static snacks.lang.parser.syntax.SyntaxFactory.*",
        "static java.util.Arrays.*",
        "static org.apache.commons.lang.StringUtils.join";

%terminals LPAREN, RPAREN, DQUOTE, STRING, IDENTIFIER, DOUBLE, LREGEX, RREGEX, REGEX_OPTIONS, SYMBOL, DOT, TRUE, FALSE,
    AS, BEGIN, ELSE_IF, ELSE_UNLESS, ELSE, IF, UNLESS, EMBRACE, END, ENSURE, FOR, FROM, HURL, IMPORT, RETURN, UNTIL,
    VAR, WHILE, SEMICOLON, COLON, QUOTE, TRIPLE_QUOTE, TRIPLE_DQUOTE, LSQUARE, RSQUARE, LCURLY, RCURLY, USE, CHARACTER,
    BREAK, NEWLINE, GOES_TO, APPLIES_TO, COMMA, INTEGER, ASSIGN, IN, THROWAWAY, LINTERPOLATE, DATA, RINTERPOLATE, PIPE,
    LINDEX, FWORD, DOUBLE_COLON, LFUNC, LFUNC_MULTILINE, CONTINUE, INFIX, LEFT_INFIX, RIGHT_INFIX, PREFIX, UNIT,
    QUOTED_IDENTIFIER, QUOTED_OPERATOR, LPATTERN, PROTOCOL, IMPLEMENT, DERIVES, WHERE, SYMBOL_CONSTRUCTOR, EMPTY_MAP,
    EMPTY_SET
;

%init {: report = new ParserEvents(); :};

%embed {:
    public Symbol parse(Scanner input) {
        try {
            return (Symbol) super.parse(input);
        } catch (IOException | Parser.Exception exception) {
            throw new ParseException(exception);
        }
    }

    public Symbol parse(Scanner input, short altGoal) {
        try {
            return (Symbol) super.parse(input, altGoal);
        } catch (IOException | Parser.Exception exception) {
            throw new ParseException(exception);
        }
    }

    private Symbol curry(Symbol[] arguments, Symbol expression) {
        return curry(arguments, expression, null);
    }

    private Symbol curry(Symbol[] arguments, Symbol expression, Symbol type) {
        Symbol body = expression;
        for (int i = arguments.length - 1; i >= 1; i--) {
            body = func(arguments[i], body);
        }
        return func(arguments[0], body, type);
    }
:};

%typeof IDENTIFIER = "String";
%typeof QUOTED_IDENTIFIER = "String";
%typeof QUOTED_OPERATOR = "String";
%typeof FWORD = "String";
%typeof STRING = "String";
%typeof INTEGER = "Integer";
%typeof DOUBLE = "Double";
%typeof REGEX_OPTIONS = "Set<Character>";
%typeof SYMBOL = "String";
%typeof CHARACTER = "Character";

%typeof function_argument = "Argument";
%typeof import_alias = "String";
%typeof sub_import = "SubImport";
%typeof suffix_typespec = "TypeSpec";
%typeof begin_case = "Symbol[]";
%typeof qualified_identifier = "QualifiedIdentifier";
%typeof qualified_fword = "QualifiedIdentifier";
%typeof initializer_properties = "Symbol[]";

module
    = module_statements.e term* {: return module(e); :}
    | term*                     {: return module(); :}
    ;

term = nl | SEMICOLON;
nl = NEWLINE;

module_statements
    = module_statement
    | module_statements term+ module_statement
    ;

module_statement
    = expression_statement
    | operator_statement
    | data_statement
    | import_statement
    | protocol_statement
    ;

expression_statement
    = expression_signature
    | expression_declaration
    ;

expression_signature
    = IDENTIFIER.id DOUBLE_COLON type_signature.t           {: return sig(id, t); :}
    | QUOTED_IDENTIFIER.id DOUBLE_COLON type_signature.t    {: return sig(id, t); :}
    ;

expression_declaration
    = IDENTIFIER.id ASSIGN expression.e             {: return def(id, e); :}
    | IDENTIFIER.id ASSIGN pattern_matcher.p        {: return namedPattern(id, p); :}
    | QUOTED_IDENTIFIER.id ASSIGN expression.e      {: return def(id, e); :}
    | QUOTED_IDENTIFIER.id ASSIGN pattern_matcher.p {: return namedPattern(id, p); :}
    ;

operator_statement
    = IDENTIFIER.id INFIX INTEGER.p                 {: return op(id, p); :}
    | IDENTIFIER.id LEFT_INFIX INTEGER.p            {: return leftOp(id, p); :}
    | IDENTIFIER.id RIGHT_INFIX INTEGER.p           {: return rightOp(id, p); :}
    | IDENTIFIER.id PREFIX INTEGER.p                {: return prefix(id, p); :}
    | QUOTED_IDENTIFIER.id INFIX INTEGER.p          {: return op(id, p); :}
    | QUOTED_IDENTIFIER.id LEFT_INFIX INTEGER.p     {: return leftOp(id, p); :}
    | QUOTED_IDENTIFIER.id RIGHT_INFIX INTEGER.p    {: return rightOp(id, p); :}
    | QUOTED_IDENTIFIER.id PREFIX INTEGER.p         {: return prefix(id, p); :}
    ;

import_statement
    = IMPORT qualified_identifier.id import_alias.a     {: return importId(id, a == null ? id.getLastSegment() : a); :}
    | IMPORT qualified_identifier.id DOT THROWAWAY      {: return importWildcard(id); :}
    | FROM qualified_identifier.id IMPORT sub_imports.s {: return from(id, s); :}
    | FROM qualified_identifier.id IMPORT LPAREN sub_imports.s COMMA? RPAREN
        {: return from(id, s); :}
    ;

data_statement
    = DATA IDENTIFIER.id IDENTIFIER.t* derives_clause? ASSIGN constructors.c
        {: return typeDef(id, asList(t), asList(c)); :}
    | DATA IDENTIFIER.id IDENTIFIER.t* derives_clause? ASSIGN LCURLY type_properties.p COMMA? RCURLY
        {: return typeDef(id, asList(t), asList(recordDef(id, p))); :}
    ;

derives_clause
    = DERIVES protocols_list.l {: return derives(l); :}
    ;

protocols_list
    = qualified_identifier
    | protocols_list COMMA qualified_identifier
    ;

protocol_statement
    = PROTOCOL IDENTIFIER.id IDENTIFIER.a+ WHERE protocol_members.ms term* END
        {: return protocol(id, asList(a), asList(ms)); :}
    | IMPLEMENT IDENTIFIER.id type_parameter.a+ WHERE implementation_members.ms term* END
        {: return implement(id, asList(a), asList(ms)); :}
    ;

protocol_members
    = expression_statement
    | protocol_members term+ expression_statement
    ;

implementation_members
    = expression_declaration
    | implementation_members term+ expression_declaration
    ;

constructors
    = constructor
    | constructors PIPE constructor
    ;

constructor
    = IDENTIFIER.id                                         {: return constDef(id); :}
    | IDENTIFIER.id LCURLY type_properties.p COMMA? RCURLY  {: return recordDef(id, p); :}
    | IDENTIFIER.id type_parameter.p+
        {:
            List<Symbol> properties = new ArrayList<>();
            int i = 0;
            for (Symbol property : p) {
                properties.add(propDef("_" + i++, property));
            }
            return recordDef(id, properties);
        :}
    ;

type_parameter
    = qualified_identifier.id               {: return ftype(id); :}
    | LPAREN constructor_reference.c RPAREN {: return c; :}
    ;

constructor_reference
    = qualified_identifier.id type_parameter.p+ {: return typeRef(ftype(id), asList(p)); :}
    ;

type_properties
    = type_property
    | type_properties COMMA type_property
    ;

type_property
    = IDENTIFIER.id COLON type_signature.t nl* {: return propDef(id, t); :}
    ;

type_signature
    = primary_signature
    | primary_signature.t APPLIES_TO type_signature.f {: return fsig(t, f); :}
    ;

primary_signature
    = qualified_identifier.id+
        {:
            if (id.length == 1) {
                return ftype(id[0]);
            } else {
                List<Symbol> parameters = new ArrayList<>();
                for (int i = 1; i < id.length; i++) {
                    parameters.add(ftype(id[i]));
                }
                return typeRef(ftype(id[0]), parameters);
            }
        :}
    | UNIT                                  {: return type(qid("snacks", "lang", "Void")); :}
    | LPAREN secondary_signature.f RPAREN   {: return f; :}
    ;

secondary_signature
    = function_signature.f {: return f; :}
    | tuple_signature.t COMMA?
        {:
            List<Symbol> types = new ArrayList<>();
            for (QualifiedIdentifier id : t) {
                types.add(ftype(id));
            }
            return tsig(types);
        :}
    ;

function_signature
    = qualified_identifier.id APPLIES_TO qualified_identifier.f {: return fsig(ftype(id), ftype(f)); :}
    | qualified_identifier.id APPLIES_TO function_signature.f   {: return fsig(ftype(id), f); :}
    ;

tuple_signature
    = qualified_identifier.id
    | tuple_signature COMMA qualified_identifier.id
    ;

sub_imports
    = sub_import
    | sub_imports COMMA sub_import
    ;

sub_import
    = IDENTIFIER.id import_alias.a          {: return sub(id, a == null ? id : a); :}
    | QUOTED_IDENTIFIER.id import_alias.a   {: return sub(id, a == null ? id : a); :}
    ;

import_alias
    = AS IDENTIFIER.id          {: return new Symbol(id); :}
    | AS QUOTED_IDENTIFIER.id   {: return new Symbol(id); :}
    |
    ;

qualified_identifier
    = IDENTIFIER.id                                     {: return qid(id); :}
    | QUOTED_IDENTIFIER.id                              {: return qid(id); :}
    | qualified_identifier.ids DOT IDENTIFIER.id        {: return qid(ids, id); :}
    | qualified_identifier.ids DOT QUOTED_IDENTIFIER.id {: return qid(ids, id); :}
    ;

statement
    = primary_statement
    | WHILE expression.c COLON sequence.e term* END                 {: return loop(c, block(e)); :}
    | UNTIL expression.c COLON sequence.e term* END                 {: return loop(unary("not", c), block(e)); :}
    | FOR IDENTIFIER.v IN expression.e COLON sequence.s term* END   {: return loop(v, e, block(s)); :}
    | primary_statement.s IF expression.c                           {: return suffix(s, c); :}
    | primary_statement.s UNLESS expression.c                       {: return suffix(s, unary("not", c)); :}
    | primary_statement.s WHILE expression.c                        {: return loop(c, s); :}
    | primary_statement.s UNTIL expression.c                        {: return loop(unary("not", c), s); :}
    ;

primary_statement
    = expression
    | BREAK                                         {: return new BreakExpression(); :}
    | CONTINUE                                      {: return new ContinueExpression(); :}
    | expression.l ASSIGN primary_statement.r       {: return assign(l, r); :}
    | VAR IDENTIFIER.v                              {: return var(v); :}
    | VAR IDENTIFIER.v ASSIGN expression.e          {: return var(v, e); :}
    | VAR QUOTED_IDENTIFIER.v                       {: return var(v); :}
    | VAR QUOTED_IDENTIFIER.v ASSIGN expression.e   {: return var(v, e); :}
    | RETURN expression.e                           {: return result(e); :}
    ;

expression
    = postfix_expression.e+ {: return msg(e); :}
    | HURL string_literal.m {: return hurl(m); :}
    | HURL IDENTIFIER.m {: return hurl(id(m)); :}
    ;

postfix_expression
    = primary_expression
    | postfix_expression.e initializer_properties.p {: return initializer(e, p); :}
    | postfix_expression.e DOT IDENTIFIER.id        {: return access(e, id); :}
    | postfix_expression.e LINDEX postfix_expression.a+ COMMA? RSQUARE
        {:
            Symbol result = apply(id("[]"), e);
            for (Symbol arg : a) {
                result = apply(result, arg);
            }
            return result;
        :}
    ;

list
    = expression
    | list COMMA expression
    ;

primary_expression
    = IDENTIFIER.id                 {: return id(id); :}
    | QUOTED_IDENTIFIER.id          {: return quoted(id); :}
    | QUOTED_OPERATOR.id            {: return qop(id); :}
    | INTEGER.val                   {: return literal(val); :}
    | DOUBLE.val                    {: return literal(val); :}
    | TRUE                          {: return literal(true); :}
    | FALSE                         {: return literal(false); :}
    | CHARACTER.c                   {: return literal(c); :}
    | SYMBOL.s                      {: return symbol(s); :}
    | LPAREN expression.e RPAREN    {: return e; :}
    | UNIT                          {: return unit(); :}
    | string_literal
    | function_literal
    | map_literal
    | list_literal
    | tuple_literal
    | set_literal
    | block
    | conditional
    | exceptional
    | LREGEX interpolation_list.e RREGEX REGEX_OPTIONS.o    {: return regex(asList(e), o); :}
    | SYMBOL_CONSTRUCTOR string_literal.s                   {: return apply(qid("snacks", "lang", "symbol"), s); :}
    ;

string_literal
    = QUOTE STRING.val QUOTE                            {: return literal(val); :}
    | QUOTE QUOTE                                       {: return literal(""); :}
    | DQUOTE interpolation_list.e DQUOTE                {: return e; :}
    | TRIPLE_QUOTE STRING.val TRIPLE_QUOTE              {: return literal(val); :}
    | TRIPLE_DQUOTE interpolation_list.e TRIPLE_DQUOTE  {: return e; :}
    ;

initializer_properties
    = LCURLY properties.p COMMA? RCURLY {: return new Symbol(p); :}
    | LCURLY COMMA? RCURLY              {: return new Symbol(new Symbol[0]); :}
    ;

properties
    = property
    | properties COMMA property
    ;

property
    = IDENTIFIER.id ASSIGN expression.e nl* {: return property(id, e); :}
    ;

list_literal
    = LSQUARE RSQUARE
        {: return qid("snacks", "lang", "EmptyList"); :}
    | LSQUARE list.es COMMA? RSQUARE
        {:
            Symbol tail = qid("snacks", "lang", "EmptyList");
            for (int i = es.length - 1; i >= 0; i--) {
                tail = apply(apply(qid("snacks", "lang", "ListElement"), es[i]), tail);
            }
            return tail;
        :}
    ;

tuple_literal
    = LPAREN COMMA? RPAREN                              {: return tuple(); :}
    | LPAREN expression.e COMMA RPAREN                  {: return tuple(e); :}
    | LPAREN expression.e COMMA list.es COMMA? RPAREN   {: return tuple(e, es); :}
    ;

set_literal
    = EMPTY_SET                                         {: return set(); :}
    | LCURLY expression.e COMMA RCURLY                  {: return set(e); :}
    | LCURLY expression.e COMMA list.es COMMA? RCURLY   {: return set(e, es); :}
    ;

map_literal
    = EMPTY_MAP                             {: return map(); :}
    | LCURLY keyed_list.e COMMA? nl* RCURLY {: return map(e); :}
    | LCURLY map_list.e COMMA? nl* RCURLY   {: return map(e); :}
    ;

block
    = LCURLY term* RCURLY               {: return invokable(block()); :}
    | LCURLY sequence.e term* RCURLY    {: return invokable(block(e)); :}
    ;

sequence
    = statement
    | sequence term+ statement
    ;

function_literal
    = UNIT APPLIES_TO LCURLY sequence.e term* RCURLY @ PRECSYM  {: return invokable(block(e)); :}
    | UNIT APPLIES_TO expression.e                              {: return invokable(e); :}
    | LFUNC APPLIES_TO expression.e RPAREN                      {: return invokable(e); :}
    | LFUNC function_argument.a+ APPLIES_TO expression.e RPAREN {: return curry(a, e); :}
    | LFUNC_MULTILINE function_argument.a+ APPLIES_TO sequence.e term* RCURLY
        {: return curry(a, block(e)); :}
    | LFUNC function_argument.a+ RPAREN suffix_typespec.t APPLIES_TO LCURLY sequence.e term* RCURLY @ PRECSYM
        {: return curry(a, block(e), t); :}
    | LFUNC function_argument.a+ RPAREN suffix_typespec.t APPLIES_TO expression.e
        {: return curry(a, e, t); :}
    ;

conditional
    = conditional_case.h default_case.e END                     {: return conditional(h, null, e); :}
    | conditional_case.h alternative_case.t+ default_case.e END {: return conditional(h, t, e); :}
    ;

conditional_case
    = IF expression.c COLON sequence.e term*        {: return condition(c, block(e)); :}
    | UNLESS expression.c COLON sequence.e term*    {: return condition(unary("not", c), block(e)); :}
    ;

alternative_case
    = ELSE_IF expression.c COLON sequence.e term*       {: return condition(c, block(e)); :}
    | ELSE_UNLESS expression.c COLON sequence.e term*   {: return condition(unary("not", c), block(e)); :}
    ;

default_case
    = ELSE sequence.e term* {: return block(e); :}
    |                       {: return nop(); :}
    ;

exceptional
    = begin_case.u sequence.s term* embrace_case.e+ ensure_case.f END   {: return begin(u, block(s), e, f); :}
    | begin_case.u sequence.s term* embrace_case.e+ END                 {: return begin(u, block(s), e, null); :}
    | begin_case.u sequence.s term* ensure_case.f END                   {: return begin(u, block(s), null, f); :}
    | begin_case.u sequence.s term* END                                 {: return begin(u, block(s), null, null); :}
    ;

begin_case
    = BEGIN             {: return new Symbol(null); :}
    | use_cases.u term+ {: return new Symbol(u); :}
    ;

use_cases
    = use_case
    | use_cases term+ use_case
    ;

use_case
    = USE expression.e                      {: return use(null, e); :}
    | USE IDENTIFIER.id ASSIGN expression.e {: return use(id, e); :}
    ;

embrace_case
    = EMBRACE IDENTIFIER.a embrace_typespec.t APPLIES_TO sequence.e term*   {: return embrace(a, t, block(e)); :}
    ;

embrace_typespec
    = COLON qualified_identifier.id {: return type(id); :}
    |                               {: return type(qid("snacks", "lang", "SnacksException")); :}
    ;

ensure_case
    = ENSURE sequence.e term* {: return block(e); :}
    ;

keyed_list
    = keyed_entry
    | keyed_list COMMA keyed_entry
    ;

keyed_entry
    = IDENTIFIER.k COLON expression.v {: return entry(symbol(k), v); :}
    ;

map_list
    = map_entry
    | map_list COMMA map_entry
    ;

map_entry
    = expression.k GOES_TO expression.v {: return entry(k, v); :}
    ;

function_argument
    = FWORD.a suffix_typespec.t {: return arg(a, t); :}
    | THROWAWAY                 {: return arg("_", null); :}
    ;

suffix_typespec
    = COLON qualified_fword.t {: return type(t); :}
    |
    ;

qualified_fword
    = FWORD.id                          {: return qid(id); :}
    | qualified_fword.ids DOT FWORD.id  {: return qid(ids, id); :}
    ;

interpolation_list
    = interpolation.e
        {: return apply(qid("snacks", "lang", "string"), e); :}
    | interpolation_list.es interpolation.e
        {: return apply(apply(qid("snacks", "lang", "concat"), es), apply(qid("snacks", "lang", "string"), e)); :}
    ;

interpolation
    = STRING.val                                {: return literal(val); :}
    | LINTERPOLATE expression.e RINTERPOLATE    {: return e; :}
    ;

pattern_matcher
    = LPATTERN patterns.as COMMA? RPAREN APPLIES_TO expression.e
        {: return pattern(asList(as), e); :}
    | LPATTERN patterns.as COMMA? RPAREN APPLIES_TO LCURLY sequence.e term* RCURLY @ PRECSYM
        {: return pattern(asList(as), block(e)); :}
    ;

patterns
    = pattern
    | patterns COMMA pattern
    ;

pattern
    = THROWAWAY                                     {: return matchAny(); :}
    | qualified_identifier.id                       {: return matchName(id); :}
    | qualified_identifier.id argument_matcher.m+   {: return matchConstructor(type(id), asList(m)); :}
    | qualified_identifier.id LCURLY RCURLY         {: return matchRecord(type(id), new ArrayList<Symbol>()); :}
    | qualified_identifier.id LCURLY property_matchers.m COMMA? RCURLY
        {: return matchRecord(type(id), asList(m)); :}
    | LPAREN pattern.p COMMA RPAREN
        {: return matchConstructor(type("snacks", "lang", "Tuple1"), asList(p)); :}
    | LPAREN pattern.p COMMA tuple_matcher.m COMMA? RPAREN
        {:
            List<Symbol> elements = new ArrayList<>();
            elements.add(p);
            elements.addAll(asList(m));
            return matchConstructor(type("snacks", "lang", "Tuple" + elements.size()), elements);
        :}
    ;

argument_matcher
    = THROWAWAY                 {: return matchAny(); :}
    | qualified_identifier.id   {: return matchName(id); :}
    | LPAREN pattern.p RPAREN   {: return p; :}
    ;

property_matchers
    = property_matcher
    | property_matchers COMMA property_matcher
    ;

property_matcher
    = IDENTIFIER.id ASSIGN pattern.p {: return matchProperty(id, p); :}
    ;

tuple_matcher
    = pattern.p
    | tuple_matcher COMMA pattern.p
    ;
