%goal module_declaration;
%goal expression;
%package "snacks.lang.compiler";
%class "Parser";
%import "java.io.IOException",
        "java.util.Set",
        "snacks.lang.compiler.syntax.*",
        "static snacks.lang.compiler.SyntaxFactory.*",
        "static java.util.Arrays.*";

%terminals LPAREN, RPAREN, DQUOTE, STRING, IDENTIFIER, DOUBLE, NOTHING, LREGEX, RREGEX, REGEX_OPTIONS, SYMBOL,
    KEY_SYMBOL, NOT_EQUALS, TRUE, FALSE, AND, AS, BEGIN, ELSE_IF, ELSE_UNLESS, ELSE, IF, UNLESS, EMBRACE, END, ENSURE,
    FOR, FROM, HURL, IMPORT, NOT, OR, RETURN, THEN, UNTIL, VAR, WHILE, SEMICOLON, COLON, BIT_NOT, IS_NOT, QUOTE,
    TRIPLE_QUOTE, TRIPLE_DQUOTE, LSHIFT, RSHIFT, URSHIFT, LSQUARE, RSQUARE, LCURLY, RCURLY, PLUS, MINUS, MULTIPLY,
    DIVIDE, MODULO, EXPONENT, RANGE, XRANGE, DOT, USE, IN, NOT_IN, IS, CHARACTER, LESS_THAN, GREATER_THAN, DO,
    LESS_THAN_EQUALS, GREATER_THAN_EQUALS, EQUALS, ASSIGN, BIT_AND, BIT_OR, BIT_XOR, COALESCE, NEWLINE, GOES_TO,
    APPLIES_TO, THROWAWAY, APPLY, COMMA, AT, INTEGER, LINTERPOLATE, RINTERPOLATE, LINDEX, LARG, FWORD, DOUBLE_COLON,
    LFUNC, LFUNC_MULTILINE
;

%init {: report = new ParserEvents(); :};

%embed {:
    public Symbol parse(Scanner input) {
        try {
            return (Symbol) super.parse(input);
        } catch (IOException | Parser.Exception exception) {
            throw new ParseException(exception);
        }
    }

    public Symbol parse(Scanner input, short altGoal) {
        try {
            return (Symbol) super.parse(input, altGoal);
        } catch (IOException | Parser.Exception exception) {
            throw new ParseException(exception);
        }
    }
:};

%right EXPONENT;
%left MULTIPLY, DIVIDE, MODULO;
%left PLUS, MINUS;
%left BIT_AND;
%left BIT_OR;
%left BIT_XOR;
%left COALESCE;
%left LSHIFT, RSHIFT, URSHIFT;
%left IS, IS_NOT, EQUALS, NOT_EQUALS, GREATER_THAN, LESS_THAN, GREATER_THAN_EQUALS, LESS_THAN_EQUALS, IN, NOT_IN;
%right NOT;
%left AND;
%left OR;
%left RANGE, XRANGE;
%right APPLY;
%right ASSIGN;

%typeof IDENTIFIER = "String";
%typeof FWORD = "String";
%typeof STRING = "String";
%typeof INTEGER = "Integer";
%typeof DOUBLE = "Double";
%typeof REGEX_OPTIONS = "Set<Character>";
%typeof SYMBOL = "String";
%typeof KEY_SYMBOL = "String";
%typeof CHARACTER = "Character";

%typeof function_argument = "Argument";
%typeof import_alias = "String";
%typeof sub_import = "SubImport";
%typeof annotation = "Annotation";
%typeof opt_annotations = "Symbol[]";
%typeof suffix_typespec = "TypeSpec";
%typeof function_typespec = "TypeSpec";
%typeof opt_function_arguments = "Symbol[]";
%typeof begin_case = "Symbol[]";
%typeof qualified_identifier = "QualifiedIdentifier";
%typeof qualified_fword = "QualifiedIdentifier";

module_declaration
    = module_expressions.e opt_terms    {: return module(e); :}
    |                                   {: return module(); :}
    ;

module_expressions
    = module_expression
    | module_expressions terms module_expression
    ;

module_expression
    = IMPORT qualified_identifier.id import_alias.a         {: return importId(id, a == null ? id.getLastSegment() : a); :}
    | IMPORT qualified_identifier.id DOT THROWAWAY          {: return importWildcard(id); :}
    | FROM qualified_identifier.id IMPORT sub_imports.s     {: return from(id, s); :}
    | FROM qualified_identifier.id IMPORT LPAREN sub_imports.s COMMA? RPAREN {: return from(id, s); :}
    | opt_annotations.a IDENTIFIER.id ASSIGN expression.e   {: return a == null ? def(id, e) : annotated(def(id, e), a); :}
    ;

sub_imports
    = sub_import
    | sub_imports COMMA sub_import
    ;

sub_import
    = IDENTIFIER.id import_alias.a {: return sub(id, a == null ? id : a); :}
    ;

import_alias
    = AS IDENTIFIER.id {: return new Symbol(id); :}
    |
    ;

opt_annotations
    = annotations.a nl* {: return new Symbol(a); :}
    |
    ;

annotations
    = annotation
    | annotations nl* annotation
    ;

annotation
    = AT qualified_identifier.id                            {: return annotation(id, nothing()); :}
    | AT qualified_identifier.id LPAREN expression.e RPAREN {: return annotation(id, e); :}
    | AT qualified_identifier.id LPAREN map_list.e RPAREN   {: return annotation(id, map(e)); :}
    | AT qualified_identifier.id LPAREN keyed_list.e RPAREN {: return annotation(id, map(e)); :}
    | AT qualified_identifier.id tuple_literal.e            {: return annotation(id, e); :}
    | AT qualified_identifier.id map_literal.e              {: return annotation(id, e); :}
    | AT qualified_identifier.id set_literal.e              {: return annotation(id, e); :}
    | AT qualified_identifier.id list_literal.e             {: return annotation(id, e); :}
    | AT qualified_identifier.id function_literal.e         {: return annotation(id, e); :}
    | AT qualified_identifier.id block.e                    {: return annotation(id, e); :}
    ;

qualified_identifier
    = IDENTIFIER.id                                 {: return qid(id); :}
    | qualified_identifier.ids DOT IDENTIFIER.id    {: return qid(ids, id); :}
    ;

statement
    = expression
    | VAR IDENTIFIER.v ASSIGN expression.e                              {: return var(v, e); :}
    | HURL expression.e                                                 {: return hurl(e); :}
    | RETURN expression.e                                               {: return result(e); :}
    | WHILE expression.c DO sequence.e default_case.d END               {: return loop(condition(c, block(e)), d); :}
    | UNTIL expression.c DO sequence.e default_case.d END               {: return loop(condition(unary("not", c), block(e)), d); :}
    | FOR IDENTIFIER.v IN expression.e DO sequence.s default_case.d END {: return loop(v, e, block(s), d); :}
    ;

expression
    = prefix_expression
    | tailed_function
    | expression.l EXPONENT expression.r            {: return binary("**", l, r); :}
    | expression.l MULTIPLY expression.r            {: return binary("*", l, r); :}
    | expression.l DIVIDE expression.r              {: return binary("/", l, r); :}
    | expression.l MODULO expression.r              {: return binary("%", l, r); :}
    | expression.l PLUS expression.r                {: return binary("+", l, r); :}
    | expression.l MINUS expression.r               {: return binary("-", l, r); :}
    | expression.l BIT_AND expression.r             {: return binary("&", l, r); :}
    | expression.l BIT_OR expression.r              {: return binary("|", l, r); :}
    | expression.l BIT_XOR expression.r             {: return binary("^", l, r); :}
    | expression.l COALESCE expression.r            {: return binary("?", l, r); :}
    | expression.l LSHIFT expression.r              {: return binary("<<", l, r); :}
    | expression.l RSHIFT expression.r              {: return binary(">>", l, r); :}
    | expression.l URSHIFT expression.r             {: return binary(">>>", l, r); :}
    | expression.l IS expression.r                  {: return is(l, r); :}
    | expression.l IS_NOT expression.r              {: return unary("not", is(l, r)); :}
    | expression.l EQUALS expression.r              {: return binary("==", l, r); :}
    | expression.l NOT_EQUALS expression.r          {: return unary("not", binary("==", l, r)); :}
    | expression.l GREATER_THAN expression.r        {: return binary(">", l, r); :}
    | expression.l LESS_THAN expression.r           {: return binary("<", l, r); :}
    | expression.l GREATER_THAN_EQUALS expression.r {: return binary(">=", l, r); :}
    | expression.l LESS_THAN_EQUALS expression.r    {: return binary("<=", l, r); :}
    | expression.l IN expression.r                  {: return binary("in", l, r); :}
    | expression.l NOT_IN expression.r              {: return unary("not", binary("in", l, r)); :}
    | NOT expression.e                              {: return unary("not", e); :}
    | expression.l AND expression.r                 {: return binary("and", l, r); :}
    | expression.l OR expression.r                  {: return binary("or", l, r); :}
    | expression.l RANGE expression.r               {: return binary("..", l, r); :}
    | expression.l XRANGE expression.r              {: return binary("...", l, r); :}
    | expression.l APPLY expression.r               {: return apply(l, r); :}
    | expression.l ASSIGN expression.r              {: return binary("=", l, r); :}
    ;

prefix_expression
    = postfix_expression
    | postfix_expression.e arguments.a  {:
                                            Symbol result = e;
                                            for (Symbol arg : a) {
                                                result = apply(result, arg);
                                            }
                                            return result;
                                        :}
    | MINUS prefix_expression.e         {: return unary("unary-", e); :}
    | PLUS prefix_expression.e          {: return unary("unary+", e); :}
    | BIT_NOT prefix_expression.e       {: return unary("unary~", e); :}
    ;

postfix_expression
    = primary_expression
    | postfix_expression.e DOT IDENTIFIER.id                    {: return access(e, id); :}
    | postfix_expression.e LINDEX arguments.a COMMA? RSQUARE    {: return index(e, a); :}
    | postfix_expression.e LARG RPAREN                          {: return invocation(e); :}
    | postfix_expression.e LARG arguments.a RPAREN              {:
                                                                    Symbol result = e;
                                                                    for (Symbol arg : a) {
                                                                        result = apply(result, arg);
                                                                    }
                                                                    return result;
                                                                :}
    ;

arguments
    = postfix_expression
    | arguments postfix_expression
    ;

list
    = expression
    | list COMMA expression
    ;

primary_expression
    = IDENTIFIER.id                 {: return id(id); :}
    | INTEGER.val                   {: return literal(val); :}
    | DOUBLE.val                    {: return literal(val); :}
    | TRUE                          {: return literal(true); :}
    | FALSE                         {: return literal(false); :}
    | NOTHING                       {: return nothing(); :}
    | CHARACTER.c                   {: return literal(c); :}
    | SYMBOL.s                      {: return symbol(s); :}
    | LPAREN expression.e RPAREN    {: return e; :}
    | QUOTE STRING.val QUOTE        {: return literal(val); :}
    | QUOTE QUOTE                   {: return literal(""); :}
    | function_literal
    | map_literal
    | list_literal
    | tuple_literal
    | set_literal
    | block
    | conditional
    | exceptional
    | DQUOTE interpolation_list.e DQUOTE                    {: return e; :}
    | TRIPLE_QUOTE STRING.val TRIPLE_QUOTE                  {: return literal(val); :}
    | TRIPLE_DQUOTE interpolation_list.e TRIPLE_DQUOTE      {: return e; :}
    | LREGEX interpolation_list.e RREGEX REGEX_OPTIONS.o    {: return regex(asList(e), o); :}
    ;

list_literal
    = LSQUARE list.e COMMA? RSQUARE {: return list(e); :}
    | LSQUARE RSQUARE               {: return list(); :}
    ;

tuple_literal
    = LPAREN COMMA? RPAREN                              {: return tuple(); :}
    | LPAREN expression.e COMMA RPAREN                  {: return tuple(e); :}
    | LPAREN expression.e COMMA list.es COMMA? RPAREN   {: return tuple(e, es); :}
    ;

set_literal
    = LCURLY COMMA RCURLY                               {: return set(); :}
    | LCURLY expression.e COMMA RCURLY                  {: return set(e); :}
    | LCURLY expression.e COMMA list.es COMMA? RCURLY   {: return set(e, es); :}
    ;

map_literal
    = LCURLY COLON RCURLY                   {: return map(); :}
    | LCURLY keyed_list.e COMMA? nl* RCURLY {: return map(e); :}
    | LCURLY map_list.e COMMA? nl* RCURLY   {: return map(e); :}
    ;

block
    = LCURLY term* RCURLY               {: return invokable(block()); :}
    | LCURLY sequence.e term* RCURLY    {: return invokable(block(e)); :}
    ;

sequence
    = statement
    | sequence term+ statement
    ;

function_literal
    = LFUNC function_arguments.a function_typespec.t APPLIES_TO expression.e RPAREN
        {:
            Symbol expression = e;
            for (int i = a.length - 1; i >= 1; i--) {
                expression = func(a[i], expression);
            }
            expression = func(a[0], expression, t);
            return expression;
        :}
    | LFUNC APPLIES_TO expression.e RPAREN
        {: return invokable(e); :}
    | LFUNC_MULTILINE function_arguments.a function_typespec.t APPLIES_TO sequence.e term* RCURLY
        {:
            Symbol expression = block(e);
            for (int i = a.length - 1; i >= 1; i--) {
                expression = func(a[i], expression);
            }
            expression = func(a[0], expression, t);
            return expression;
        :}
    ;

function_typespec
    = DOUBLE_COLON FWORD.t {: return type(qid(t)); :}
    |
    ;

tailed_function
    = LFUNC opt_function_arguments.a RPAREN suffix_typespec.t APPLIES_TO expression.e
        {:
            Symbol expression = e;
            if (a == null) {
                expression = invokable(expression);
            } else {
                for (int i = a.length - 1; i >= 1; i--) {
                    expression = func(a[i], expression);
                }
                expression = func(a[0], expression, t);
            }
            return expression;
        :}
    ;

opt_function_arguments
    = function_arguments.a {: return new Symbol(a); :}
    |
    ;

conditional
    = conditional_case.h default_case.e END                     {: return conditional(h, null, e); :}
    | conditional_case.h alternative_cases.t default_case.e END {: return conditional(h, t, e); :}
    ;

conditional_case
    = IF expression.c THEN sequence.e term*     {: return condition(c, block(e)); :}
    | UNLESS expression.c THEN sequence.e term* {: return condition(unary("not", c), block(e)); :}
    ;

alternative_cases
    = alternative_case
    | alternative_cases alternative_case
    ;

alternative_case
    = ELSE_IF expression.c THEN sequence.e term*        {: return condition(c, block(e)); :}
    | ELSE_UNLESS expression.c THEN sequence.e term*    {: return condition(unary("not", c), block(e)); :}
    ;

default_case
    = ELSE sequence.e term* {: return dcase(block(e)); :}
    |
    ;

exceptional
    = begin_case.u sequence.s term* embrace_cases.e ensure_case.f END   {: return begin(u, block(s), e, f); :}
    | begin_case.u sequence.s term* embrace_cases.e END                 {: return begin(u, block(s), e, null); :}
    | begin_case.u sequence.s term* ensure_case.f END                   {: return begin(u, block(s), null, f); :}
    | begin_case.u sequence.s term* END                                 {: return begin(u, block(s), null, null); :}
    ;

begin_case
    = BEGIN             {: return new Symbol(null); :}
    | use_cases.u term+ {: return new Symbol(u); :}
    ;

use_cases
    = use_case
    | use_cases term+ use_case
    ;

use_case
    = USE expression.e                      {: return use(null, e); :}
    | USE IDENTIFIER.id ASSIGN expression.e {: return use(id, e); :}
    ;

embrace_cases
    = embrace_case
    | embrace_cases embrace_case
    ;

embrace_case
    = EMBRACE IDENTIFIER.a embrace_typespec.t APPLIES_TO sequence.e term*   {: return embrace(a, t, block(e)); :}
    | EMBRACE IDENTIFIER.a APPLIES_TO sequence.e term*                      {: return embrace(a, null, block(e)); :}
    ;

embrace_typespec
    = COLON qualified_identifier.id {: return type(id); :}
    ;

ensure_case
    = ENSURE sequence.e term* {: return ensure(block(e)); :}
    ;

keyed_list
    = keyed_entry
    | keyed_list COMMA keyed_entry
    ;

keyed_entry
    = KEY_SYMBOL.k expression.v {: return entry(symbol(k), v); :}
    ;

map_list
    = map_entry
    | map_list COMMA map_entry
    ;

map_entry
    = expression.k GOES_TO expression.v {: return entry(k, v); :}
    ;

function_arguments
    = function_argument
    | function_arguments function_argument
    ;

function_argument
    = FWORD.a suffix_typespec.t {: return arg(a, t); :}
    | THROWAWAY                 {: return arg("_", null); :}
    ;

suffix_typespec
    = COLON qualified_fword.t {: return type(t); :}
    |
    ;

qualified_fword
    = FWORD.id                          {: return qid(id); :}
    | qualified_fword.ids DOT FWORD.id  {: return qid(ids, id); :}
    ;

interpolation_list
    = interpolation.e                       {: return apply(id("stringy"), e); :}
    | interpolation_list.es interpolation.e {: return apply(apply(id("concat"), es), apply(id("stringy"), e)); :}
    ;

interpolation
    = STRING.val                                {: return literal(val); :}
    | LINTERPOLATE expression.e RINTERPOLATE    {: return e; :}
    ;

opt_terms
    = terms
    |
    ;

terms
    = term
    | terms term
    ;

term
    = nl
    | SEMICOLON
    ;

nl
    = NEWLINE
    ;
